//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MockDb.PushR {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PushData", Namespace="http://schemas.datacontract.org/2004/07/PushR.Push")]
    [System.SerializableAttribute()]
    public partial class PushData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PushR.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/NotifyUpdate", ReplyAction="http://tempuri.org/IDataService/NotifyUpdateResponse")]
        void NotifyUpdate(MockDb.PushR.PushData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/NotifyUpdate", ReplyAction="http://tempuri.org/IDataService/NotifyUpdateResponse")]
        System.Threading.Tasks.Task NotifyUpdateAsync(MockDb.PushR.PushData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/NewQuoteRequest", ReplyAction="http://tempuri.org/IDataService/NewQuoteRequestResponse")]
        void NewQuoteRequest(System.DateTime date, decimal amount, string originator, int team, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/NewQuoteRequest", ReplyAction="http://tempuri.org/IDataService/NewQuoteRequestResponse")]
        System.Threading.Tasks.Task NewQuoteRequestAsync(System.DateTime date, decimal amount, string originator, int team, string data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : MockDb.PushR.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<MockDb.PushR.IDataService>, MockDb.PushR.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void NotifyUpdate(MockDb.PushR.PushData data) {
            base.Channel.NotifyUpdate(data);
        }
        
        public System.Threading.Tasks.Task NotifyUpdateAsync(MockDb.PushR.PushData data) {
            return base.Channel.NotifyUpdateAsync(data);
        }
        
        public void NewQuoteRequest(System.DateTime date, decimal amount, string originator, int team, string data) {
            base.Channel.NewQuoteRequest(date, amount, originator, team, data);
        }
        
        public System.Threading.Tasks.Task NewQuoteRequestAsync(System.DateTime date, decimal amount, string originator, int team, string data) {
            return base.Channel.NewQuoteRequestAsync(date, amount, originator, team, data);
        }
    }
}
